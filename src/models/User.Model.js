const mongoose = require("mongoose");
const bcrypt = require("bcryptjs");
const { validateEmail, validateMinLength } = require("../utils/ValidateModel");

const userSchema = new mongoose.Schema({
  fullName: {
    type: String,
  },
  phone: {
    type: String,
    required: true,
    validate: {
      validator: (phone) => validateMinLength(phone, 10) && phone.length === 10,
      message: `Phone should be exactly 10 characters.`
    }
  },
  email: {
    type: String,
    required: true,
    validate: [
      {
        validator: validateEmail,
        message: props => `${props.value} is not a valid email address!`
      },
    ]
  },
  address: {
    type: String,
  },
  status: {
    type: String,
    default: "active",
    enum: ["active", "inactive"],
  },
  role: {
    type: String,
    default: "user",
    enum: ["user", "admin"],
  },
  password: {
    type: String,
    required: true,
    validate: {
      validator: (password) => validateMinLength(password, 8) && password.length === 8,
      message: `Password should be exactly 8 characters.`
    }
  },
});

userSchema.pre("save", async function (next) {
  if (!this.isModified("password")) return next();
  const salt = await bcrypt.genSalt(10);
  this.password = await bcrypt.hash(this.password, salt);
  next();
});

module.exports = mongoose.model("User", userSchema)

/**
 * @swagger
 * components:
 *   schemas:
 *     User:
 *       type: object
 *       required:
 *         - phone
 *         - email
 *         - password
 *       properties:
 *         _id:
 *           type: string
 *           format: objectId
 *           description: Autogenerated ObjectId for each user.
 *         fullName:
 *           type: string
 *           description: Full name of the user.
 *         phone:
 *           type: string
 *           description: Phone number of the user, must be 10 characters.
 *           minLength: 10
 *           maxLength: 10
 *         email:
 *           type: string
 *           description: Email of the user.
 *           format: email
 *         address:
 *           type: string
 *           description: Address of the user.
 *         status:
 *           type: string
 *           description: Status of the user.
 *           enum: [active, inactive]
 *           default: active
 *         role:
 *           type: string
 *           description: Role of the user.
 *           enum: [user, admin]
 *           default: user
 *         password:
 *           type: string
 *           description: Password of the user, must be 8 characters.
 *           minLength: 8
 *           maxLength: 8
 */